name: TEST - Advanced Scoring

# Relative to risk.rego
# Purpose:
# Provides an advanced risk evaluation by incorporating additional dimensions.
#
# Mechanism:
# - Calculates risk not only based on severity levels but also considers 'impact' and 'likelihood' of the risks.
# - Assigns weights or values to these factors for a more comprehensive risk analysis.
#
# Deny if:
# 1. The 'risks' data is missing or incomplete.
# 2. Impact or likelihood data is unavailable for any risk being evaluated.
# 3. The combined risk (severity, impact, likelihood) exceeds an acceptable threshold.
# 4. Critical risks have a high likelihood and significant impact, regardless of the overall score.
#
# Focus:
# Holistic risk assessment, combining severity, impact, and likelihood to make more informed decisions.

on:
  push:
    branches:
      - main
    paths:
      - 'threagile.yaml'
      - 'policies/**'
  pull_request:
  workflow_dispatch:

jobs:
  threagile_analysis:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false # Ensures that the GITHUB_TOKEN is available for push

      # Step 2: Run Threagile
      - name: Run Threagile
        id: threagile
        uses: threagile/run-threagile-action@v1
        with:
          model-file: 'threagile.yaml'

      # Step 3: Verify Generated Files (Optional but Recommended)
      - name: Verify Generated Files
        run: |
          ls -la threagile/output
          echo "Contents of threagile/output:"
          cat threagile/output/risks.json || echo "risks.json not found."

      # Step 4: Archive resulting files as artifacts
      - name: Archive Results
        uses: actions/upload-artifact@v3
        with:
          name: threagile-report
          path: threagile/output

      - name: Set up Git user
        run: |
          git config --local user.email "threagile@example.com" # Customize as needed
          git config --local user.name "Threagile" # Customize as needed
    
      - name: Add files to git
        run: |
          git add threagile/output/report.pdf
          git add threagile/output/data-flow-diagram.png
          git add threagile/output/stats.json
          git add threagile/output/risks.json
  
      - name: Commit changes if any
        run: |
          if ! git diff --cached --quiet; then
            git commit -m "Update threat model reports and data-flow diagrams by Threagile"
            #git push origin HEAD:${{ github.ref }}
          else
            echo "No changes to commit."
          fi
  
      - name: Push changes to repository
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          if ! git diff --cached --quiet; then
            git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/DavidCheuk/threagile_OPA_CI-CD.git HEAD:main
          fi


      # Step 5: Commit & Push Report and DFD Diagram
      #- name: Commit & Push Report and DFD Diagram
      #  run: |
      #    git config --local user.email "threagile@example.com" # Customize as needed
      #    git config --local user.name "Threagile" # Customize as needed
      #    git add threagile/output/report.pdf
      #    git add threagile/output/data-flow-diagram.png
      #    git add threagile/output/stats.json
      #    git add threagile/output/risks.json
      #    # Commit only if there are changes
      #    if ! git diff --cached --quiet; then
      #      git commit -m "Update threat model reports and data-flow diagrams by Threagile"
      #      git push origin HEAD:${{ github.ref }}
      #    else
      #      echo "No changes to commit."
      #    fi

  opa_policy_check:
    runs-on: ubuntu-latest
    needs: threagile_analysis
    strategy:
      # Matrix to run three test scenarios
      # 1) success => risk scenario that should pass
      # 2) fail => risk scenario that should fail
      # 3) empty => treat as below threshold (fail)
      matrix:
        scenario: [success, fail, empty]

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up OPA using the setup-OPA action
      - name: Set Up Open Policy Agent
        uses: open-policy-agent/setup-opa@v2.2.0
        with:
          version: '0.70.0' # Specify the desired OPA version

      # Step 3: Verify OPA installation by checking its version
      - name: Verify OPA Installation
        run: opa version

      # Step 4: Prepare scenario-specific input (success, fail, empty)
      - name: Prepare Input for Scenario
        run: |
          echo "Running scenario: ${{ matrix.scenario }}"
          case ${{ matrix.scenario }} in
            success)
              echo "Using 'risks-success.json' to test a passing scenario."
              cp threagile/output/risks-success.json input.json
              ;;
            fail)
              echo "Using 'risks-fail.json' to test a failing scenario."
              cp threagile/output/risks.json input.json
              ;;
            empty)
              echo "No Threagile output found or empty scenario - treating as below threshold."
              echo '{"risks": []}' > input.json
              ;;
            *)
              echo "Unexpected scenario. Exiting..."
              exit 1
              ;;
          esac

      # Step 5: Run OPA Policy Check on the prepared input.json
      - name: Run OPA Policy Check
        run: |
          # Ensure jq is installed for JSON parsing (if not already available)
          if ! command -v jq &> /dev/null; then
            echo "jq not found. Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Evaluate the 'valid_input' rule
          opa eval \
            --data policies/vulnerabilities/risk.rego \
            --input input.json \
            "data.policies.vulnerabilities.valid_input" \
            --format=json > valid_input.json
          
          # Evaluate the 'deny_missing_risks' policy
          opa eval \
            --data policies/vulnerabilities/risk.rego \
            --input input.json \
            "data.policies.vulnerabilities.deny_missing_risks" \
            --format=json > deny_missing_risks.json
         
          # Evaluate the 'deny_low_score' policy
          opa eval \
            --data policies/vulnerabilities/risk.rego \
            --input input.json \
            "data.policies.vulnerabilities.deny_low_score" \
            --format=json > deny_low_score.json
        
          # Evaluate the 'score_output' policy
          opa eval \
            --data policies/vulnerabilities/risk.rego \
            --input input.json \
            "data.policies.vulnerabilities.score_output" \
            --format=json > score_output.json
        
          echo " "
          echo "================= OPA Evaluation Results for '${{ matrix.scenario }}' ================="
          echo "deny_low_score.json:"
          cat deny_low_score.json
          echo "score_output.json:"
          cat score_output.json
          echo " "
          echo "---------------------------------------------------------------------------------------"
        
          # Extract deny_low_score messages
          deny_low_score_msgs=$(jq -r '.result[].expressions[].value | if type == "object" and length > 0 then . else empty end' deny_low_score.json)
        
          # Extract only the key (message string) from deny_missing_risks.json
          temp_msgs=$(jq -r '.result[].expressions[].value | keys[]?' deny_missing_risks.json)
          
          # Set and export deny_missing_risks_msgs as a plain string
          deny_missing_risks_msgs="$temp_msgs"
          export deny_missing_risks_msgs
          echo "deny_missing_risks_msgs=$deny_missing_risks_msgs" >> $GITHUB_ENV
        
          # Debug: Verify the variable is set in the current shell
          echo "deny_missing_risks_msgs is set to: $deny_missing_risks_msgs"
        
          # Count how many messages are in the 'deny_low_score' evaluation
          deny_low_score_count=$(echo "$deny_low_score_msgs" | jq 'if . == null or . == "" then 0 else (keys | length) end')
          deny_low_score_count=${deny_low_score_count:-0}
        
          echo "Deny Low Score Count: $deny_low_score_count"
        
          # If there are any 'deny_low_score' messages, treat it as a fail
          if [ "$deny_low_score_count" -gt 0 ]; then
            echo "OPA Policy Check Failed: Total vulnerability score is below the threshold."
            echo "Deny Low Score Messages:"
            echo "$deny_low_score_msgs" | jq '.' || echo "$deny_low_score_msgs"
            exit 1
          else
            # Otherwise, read the score to confirm a pass
            score=$(jq '.result[].expressions[].value' score_output.json)
            echo "Total Vulnerability Score: $score"
        
            echo "OPA Policy Check Passed: Total vulnerability score $score meets the threshold."
          fi
        shell: /usr/bin/bash -e {0}
