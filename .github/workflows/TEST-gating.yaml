name: TEST - Gating

# Relative to gate.rego
# Purpose:
# Implements a simple gating mechanism to evaluate vulnerabilities.
#
# Mechanism:
# Evaluates the number of high and critical vulnerabilities in a system.
#
# Deny if:
# 1. The 'risks' data is missing.
# 2. Any of the critical, elevated, or high severities have 'unchecked' vulnerabilities.
#
# Focus:
# Straightforward evaluation based solely on the presence and count of critical issues.

on:
  push:
    branches:
      - main
    paths:
      - 'threagile.yaml'
      - 'policies/**'
  pull_request:
  workflow_dispatch:

jobs:
  threagile_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Run Threagile
        id: threagile
        uses: threagile/run-threagile-action@v1
        with:
          model-file: 'threagile.yaml'

      - name: Verify Generated Files
        run: |
          echo "Verifying Threagile output..."
          ls -la threagile/output
          cat threagile/output/stats.json
          cat threagile/output/risks.json

      - name: Archive Results
        uses: actions/upload-artifact@v3
        with:
          name: threagile-report
          path: threagile/output

      - name: Set up Git user
        run: |
          git config --local user.email "threagile@example.com" # Customize as needed
          git config --local user.name "Threagile" # Customize as needed

      - name: Add files to git
        run: |
          git add threagile/output/report.pdf
          git add threagile/output/data-flow-diagram.png
          git add threagile/output/stats.json
          git add threagile/output/risks.json
  
      - name: Commit changes if any
        run: |
          if ! git diff --cached --quiet; then
            git commit -m "Update threat model reports and data-flow diagrams by Threagile"
          else
            echo "No changes to commit."
          fi
  
      - name: Push changes to repository
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          if ! git diff --cached --quiet; then
            git push https://x-access-token:${PERSONAL_ACCESS_TOKEN}@github.com/${{ github.repository }}.git HEAD:refs/heads/main
          else
            echo "No changes to commit."
          fi

  opa_policy_check:
    runs-on: ubuntu-latest
    needs: threagile_analysis
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Open Policy Agent
        uses: open-policy-agent/setup-opa@v2.2.0
        with:
          version: '0.70.0'

      - name: Verify OPA Installation
        run: opa version

      - name: Run OPA Policy Check
        run: |
          # Ensure jq is installed
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          check_opa() {
            local input_file=$1
            echo "Evaluating policy for $input_file"

            opa eval --data policies/vulnerabilities/gate.rego \
              --input "$input_file" "data.policies.vulnerabilities.deny" --format=json > opa_result.json

            local deny_count=$(jq '.result[0].expressions[0].value | length' opa_result.json)
            echo "Deny Count: $deny_count"

            cat opa_result.json

            if [ "$deny_count" -gt 0 ]; then
              echo "OPA Policy Check Failed: Detected $deny_count issues."
              jq -r '.result[0].expressions[0].value[]' opa_result.json
              return 0 # ----- return 1 Commented out to let remaining test run
            else
              echo "OPA Policy Check Passed: No high-severity vulnerabilities detected."
              return 0
            fi

          }

          # Test 1: Valid Threagile output
          echo "============ Running Test 1: Valid Threagile artifacts... ============"
          cp threagile/output/success.json input.json
          check_opa input.json # || exit 1 ----- Commented out to let remaining test run

          # Test 2: Missing Threagile output
          echo "============ Running Test 2: Missing Threagile artifacts... ============"
          echo "{}" > input.json
          check_opa input.json # || exit 1 ----- Commented out to let remaining test run

          # Test 3: High/Critical vulnerabilities
          echo "============ Running Test 3: High/Critical vulnerabilities present... ============"
          cp threagile/output/stats.json input.json
          check_opa input.json || exit 1
